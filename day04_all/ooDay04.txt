回顾:
1.引用类型数组:
    Cell[] cells = new Cell[4]; //创建Cell数组对象
	cells[0] = new Cell(2,5); //创建Cell对象 

	int[][] arr = new int[3][];
	arr[0] = new int[4];
2.继承:
    代码的复用，extends
	父类/基类:共有的
	子类/派生类:特有的
	子继承父后，子具有:父+子
	单一继承，传递性
	构造子之前必须先构造父，不写则默认super()调父类无参构造，
	自己写了则不再默认提供
3.super:指代当前对象的父类对象
   super.成员变量名:访问父类的成员变量
   super.方法名():调用父类的方法
   super():调用父类的构造方法
4.向上造型:
  1)父类型的引用指向子类的对象
  2)能点出来什么，看引用的类型







笔记:
1.方法的重写(Override):重新写、覆盖
  1)发生在父子类中，方法名称相同，参数列表相同，方法体不同
  2)重写方法被调用时，看对象的类型
2.重写与重载的区别:---------面试题
  1)重写(Override):
    1.1)发生在父子类中，方法名称相同，参数列表相同，方法体不同
	1.2)遵循"运行期绑定"，看对象的类型来调用方法
  2)重载(Overload):
    2.1)发生在一个类中，方法名称相同，参数列表不同，方法体不同
	2.2)遵循"编译期绑定"，看引用的类型来绑定方法
3.package:
  1)作用:避免类的命名冲突
  2)类的全称: 包名.类名
  3)包名可以有层次结构，同包中的类不能同名
  4)建议:包名所有字母都小写
  import:
  1)同包中的类可以直接访问
    不同包中的类不能直接访问，若想访问有如下两种方式:
	1.1)先import声明类再使用----建议
	1.2)类的全称----------------太繁琐，不建议
4.访问控制修饰符:
  1)public:公开的，任何类
  2)private:私有的，本类
  3)protected:受保护的，本类、子类、同包类
  4)默认的:什么也不写，本类、同包类
  类的访问修饰: public、默认的
  类中成员的访问修饰: 如上4种都可以
5.内存管理:由JVM管理---------------------了解
  1)堆:
    1.1)存储所有new出来的对象(包含成员变量)
	1.2)没有任何引用所指向的对象为垃圾，
	    垃圾回收器(GC)不定时到内存中清扫垃圾，
		回收过程是透明的，但不一定一发现垃圾就立即回收，
		调用System.gc()建议JVM尽快调度GC来回收垃圾
	1.3)内存泄漏:不再使用的内存还没有被及时的回收
	    建议:不再使用的对象及时将引用设置为null
	1.4)成员变量的生命周期:
	      创建对象时存在堆中，对象被回收时一并消失
  2)栈:
    2.1)存储正在调用中的方法的所有局部变量(包括参数)
	2.2)调用方法时，在栈中为该方法分配一块对应的栈帧，
	    栈帧中存储的是所有的局部变量(包括参数)，
		方法调用结束时，栈帧被清除，局部变量一并失效
	2.3)局部变量的生命周期:
	      调用方法时存在栈中，方法调用结束时与栈帧一并被清除
  3)方法区:
    3.1)存储的是.class字节码文件(包括方法、静态变量)
	3.2)方法只有一份，能过this来区分具体的对象
6.static:静态的
  1)静态变量:
    1.1)由static修饰
	1.2)属于类的，存储在方法区中，只有一份
	1.3)常常通过类名点来访问
	1.4)何时用:所有对象所共享的资源(图片、音频、视频等)
  2)静态方法:
    2.1)由static修饰
	2.2)属于类的，存储在方法区中，只有一份
	2.3)常常通过类名点来访问
	2.4)静态方法没有隐式this传递的，
	    静态方法中不能直接访问实例成员
	2.5)何时用:方法的操作仅与参数相关而与对象无关
  3)静态块:
    3.1)由static修饰
	3.2)属于类的，在类被加载时自动执行，
	    因为类中被加载一次，所以静态块也只执行一次
	3.3)何时用:加载/初始化静态资源(图片、音频、视频等)



练习:
1)练习OverrideDemo
2)练习OverrideOverloadDemo
3)练习StaticDemo
4)自学final和static final


当日事当日毕



















class Aoo{
  void show(){}
}
class Boo extends Aoo{
  void show(String str){} //重载
}

Boo o = new Boo();
o.show();
o.show("abc");

















不同对象，调用方法之后，结果都一样-----说明与对象无关(静态)
                         结果不一样-----说明与对象有关(实例)












Cell c1 = new Cell(2,5);
c1.drop();-----------------c1.row=3

Cell c2 = new Cell(6,8);
c2.drop();-----------------c2.row=7

class Cell{
  int row;
  int col;
  void drop(){ //与对象有关
    row++;
  }
  void moveLeft(){
    col--;
  }
  String getCellInfo(){
    return row+","+col;
  }
}


实际应用中，大部分的行为都是与对象有关的

















Arrays.sort(arr);

假设sort()不是静态的:
无论是a1,a2,a3,...,100中的哪个对象，
去sort(arr)最终的结果都是一样的
意味着sort()方法，与对象无关，而仅与参数相关

  Arrays a1 = new Arrays();
  a1.sort(arr);

  Arrays a2 = new Arrays();
  a2.sort(arr);

  Arrays a3 = new Arrays();
  a3.sort(arr);













假设sqrt()不是静态的:
无论m1,m2,m3,...,m100中的哪个对象
去sqrt(25)，最终的结果都是一样的
意味着sqrt()方法，与对象无关，而仅与参数有关


  Math m1 = new Math();
  double a = m1.sqrt(25); //5.0

  Math m2 = new Math();
  double a = m2.sqrt(25); //5.0

  Math m3 = new Math();
  double a = m3.sqrt(25); //5.0













double a = Math.random();
double b = Math.sqrt(25);
Arrays.sort(arr); //静态方法


Scanner scan = new Scanner(System.in);
int a = scan.nextInt();
int b = scan.nextDouble(); //实例方法



















问:实例方法多还是静态方法多?
答:实例方法多(因为实例变量多)

















class Moo{ //演示静态方法
	int a;
	static int b;
	void show(){ //有this
		System.out.println(this.a);
		System.out.println(Moo.b);
	}
	//没有this就意味着没有对象
	//而实例变量a必须通过对象点来访问
	static void test(){ //没有this
		System.out.println(a); //编译错误
		System.out.println(Moo.b);
	}
}














类中实例变量多还是静态变量多?
-------实例变量多

class Student{ 
  String name;
  int age;
  String address;
}

class Cell{
  int row;
  int col;
}








map.jpg----------------共享(1份)
意外.mp4---------------共享(1份)
楚乔传.avi-------------共享(1份)





















成员变量分两种:
1)实例变量:没有static修饰，属于对象的，存储在堆中，
           有几个对象就有几份
		   对象点来访问
2)静态变量:由static修饰，属于类的，存储在方法区中，
           只有一份
		   类名点来访问





class Aoo{
  int a;
  static int b;
}















this


Cell c = new Cell();
c.row = 2;
c.col = 5;
c.drop();---------------------c.row=3;

Cell cc = new Cell();
cc.row = 1;
cc.col = 6;
cc.drop();--------------------cc.row=2;


ccc.drop();



问:在drop()中要不要区分到底是c还是cc
答:需要区分

问:如何区分的?
答:



row,col------有几个对象就有几份(每个对象有自己独立的)
















成员变量:
1)类中，方法外
2)创建对象时存在堆中，对象被回收时一并被回收
3)有默认值

局部变量:
1)方法中
2)调用方法时存在栈中，调用结束时与栈帧一并被清除
3)没有默认值



Aoo o = new Aoo();----------------a=0
o.show(5);------------------------b=5

class Aoo{
  int a;
  void show(int b){
    int c;
	System.out.println(a); //0
	System.out.println(b); //5
	System.out.println(c); //编译错误
  }
}

















Java-----垃圾回收器



C++














System.gc();-------------


垃圾回收器(GC)


















有一个Java程序，运行运行运行，报内存不足(JVM的内存的不足)
中关村买了4G的内存条，装到电脑上-------依然内存不足


给JVM加内存


JVM:java虚拟机


















Joo






oo.day04.vis



Hoo












public class Aoo{
  private int a;
}
class Aoo{
}








数据私有化，行为公开化

class Card{
  private String cardId;
  private String cardPwd;
  private double balance;

  public boolean payMoney(double money){
    if(balance>=money){
	  balance-=money;
	  return true;
	}else{
	  return false;
	}
  }

  public boolean checkPwd(String input){
    if(input.equals(cardPwd)){
	  return true;
	}else{
	  return false;
	}
  }

}



Arrays.sort(arr);-------升序排列




















package java.util;
class Scanner{
  Scanner(Stream s){
  }
  int nextInt(){
  }
  double nextDouble(){
  }
  String next(){
  }
}

import java.util.Scanner;
Scanner scan = new Scanner(System.in);
int a = scan.nextInt();
double b = scan.nextDouble();
String c = scan.next();















package a;
class Aoo{
}
class Boo{
  Aoo o = new Aoo();
}

package b;
import a.Aoo;
class Coo{
  Aoo o = new Aoo();
}
















A公司:
   package a.b.c.d;
   class Aoo{
   }

B公司:
   package a.b.c.d;
   class Aoo{
   }




包名建议:
  域名的反写 . 项目名称  . 模块名称      . 类名
  cn.tedu    .  aproject  . stumanager    .
  cn.tedu    .  aproject  . coursemanager .














  cn.tedu    .  bproject  .



aproject-----功能
bproject-----




  com.taobao .
  com.baidu  .














package a.b.c.d.e.f;
class Aoo{ //a.b.c.d.e.f.Aoo
}


package b;
class Aoo{ //b.Aoo
}















项目------------小区
包--------------楼+单元
类--------------601
601














Override与Overload的区别:
  重载:一个类中...
  重写:父子类中...

Overriding与Overloading的区别:














编译期:.java，经编译，生成.class字节码文件--只检查语言
运行期:JVM加载.class并运行.class




内存管理--------由JVM来管理







我继承了一个中餐馆
A:我还是想继续做中餐--------------不需要重写
B:我想改成做西餐------------------需要重写
C:我想在中餐基础之上加西餐--------需要重写(先super)















Student zs = new Student();
zs.name = "zhangsan";
zs.age = 25;
zs.address = "廊坊";
zs.className = "JSD1707";
zs.sayHi(); //zhangsan,25,廊坊,JSD1707

Teacher ls = new Teacher();
ls.name = "lisi";
ls.age = 26;
ls.address = "佳木斯";
ls.salary = 5000;
ls.sayHi(); //lisi,26,佳木斯,5000

Doctor ww = new Doctor();
ww.name = "wangwu";
ww.age = 27;
ww.address = "山东";
ww.level = "主任医生";
ww.sayHi(); //wangwu,27,山东

Student zs = new Student(...);
zs.sayHi(); //调Student

Person ls = new Student(...); //向上造型
ls.sayHi(); //调Student

class Person{
  String name;
  int age;
  String address;
  void sayHi(){
    System.out.println(name+","+age+","+address);
  }
}
class Student extends Person{
  String className;
  void sayHi(){
    System.out.println(name+","+age+","+address+","+className);
  }
}
class Teacher extneds Person{
  double salary;
  void sayHi(){
    System.out.println(name+","+age+","+address+","+salary);
  }
}
class Doctor extends Person{
  String level;
}






















